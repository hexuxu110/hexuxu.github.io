<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/03/QUIC%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/03/03/QUIC%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="QUIC协议"><a href="#QUIC协议" class="headerlink" title="QUIC协议"></a>QUIC协议</h2><p>TCP队头阻塞的主要原因是数据包超时确认或丢失阻塞了当前窗口向右滑动，我们最容易想到的解决队头阻塞的方案是不让超时确认或丢失的数据包将当前窗口阻塞在原地。QUIC也正是采用上述方案来解决 TCP 队头阻塞问题的。</p><h5 id="QUIC-的无队头阻塞解决方案："><a href="#QUIC-的无队头阻塞解决方案：" class="headerlink" title="QUIC 的无队头阻塞解决方案："></a>QUIC 的无队头阻塞解决方案：</h5><p>每个流都是严格按照packet Number单调递增，</p><p>UIC 使用的 Packet Number单调递增的设计，可以让数据包不再像 TCP 那样必须有序确认，QUIC 支持乱序确认，当数据包 Packet N丢失后，只要有新的已接收数据包确认，当前窗口就会继续向右滑动。待发送端获知数据包 Packet N丢失后，会将需要重传的数据包放到待发送队列，重新编号比如数据包 Packet N+M 后重新发送给接收端</p><p>通过Stream ID和StreamOffset来对比重发数据包和丢失数据包</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
