<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/06/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%AA%E5%85%B1%E4%BA%AB%EF%BC%9F/"/>
    <url>/2022/03/06/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%AA%E5%85%B1%E4%BA%AB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是伪共享？"><a href="#什么是伪共享？" class="headerlink" title="什么是伪共享？"></a>什么是伪共享？</h2><h5 id="先说一下CPU缓存"><a href="#先说一下CPU缓存" class="headerlink" title="先说一下CPU缓存"></a>先说一下CPU缓存</h5><p>CPU缓存：是位于 CPU 与内存之间的临时存储器，它的容量比内存小的多但是交换速度却比内存要快得多。</p><p>高速缓存的出现主要是为了解决 CPU 运算速度与内存读写速度不匹配的矛盾，因为 CPU 运算速度要比内存读写速度快很多，这样会使 CPU 花费很长时间等待数据到来或把数据写入内存。在缓存中的数据是内存中的一小部分，但这一小部分是短时间内 CPU 即将访问的，当 CPU 调用大量数据时，就可避开内存直接从缓存中调用，从而加快读取速度。</p><p>一般为了更好发挥cpu的性能，不让cpu等待，一般使用多级缓存。越贴近CPU的缓存速度越快，容量越小，造价成本也越高，而高速缓存一般可以分为L1、L2、L3三级缓存，按照性能的划分：L1&gt;L2&gt;L3。</p><p>这里我给大家看一下我自己电脑的CPU缓存：</p><p><img src="https://raw.githubusercontent.com/hexuxu110/image/main/img/cpu.png"></p><p>L1 Data：一级缓存，存放数据</p><p>L1 Inst：一级缓存，存放操作数据指令</p><p>Level2：二级缓存</p><p>Level3：三级缓存</p><h5 id="缓存行："><a href="#缓存行：" class="headerlink" title="缓存行："></a>缓存行：</h5><p>数据在缓存内部都是按照行来存储的，这就叫做缓存行。缓存行一般都是2的整数幂个字节，一般来说范围在32-256个字节之间，现在最为常见的缓存行的大小在64个字节。</p><h5 id="伪共享："><a href="#伪共享：" class="headerlink" title="伪共享："></a><strong>伪共享</strong>：</h5><p>在多个线程并发修改一个缓存行中的多个变量时，由于只能同时有一个线程去操作缓存行，将会导致性能的下降。</p><p><img src="https://raw.githubusercontent.com/hexuxu110/image/main/img/%E4%BC%AA%E5%85%B1%E4%BA%AB.png"></p><p>当x,y共用一块缓存行，当线程A修改x，线程B修改y，因为x，y共用缓存行，当线程A修改了x变量 ，因为缓存一致性协议导致线程B中y变量缓存一直失效。 进而导致y变量的性能下降。</p><h5 id="如何解决伪共享？"><a href="#如何解决伪共享？" class="headerlink" title="如何解决伪共享？"></a>如何解决伪共享？</h5><h6 id="我们自定义填充缓存行："><a href="#我们自定义填充缓存行：" class="headerlink" title="我们自定义填充缓存行："></a>我们自定义填充缓存行：</h6><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLong</span> &#123;<br>    <span class="hljs-comment">//共48字节+java对象头16字节</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> padding1, padding2, padding3, padding4, padding5;<br>&#125;<br></code></pre></td></tr></table></figure><p>让我们的变量独享一个缓存行</p><h6 id="JDK1-8中-Contented注解："><a href="#JDK1-8中-Contented注解：" class="headerlink" title="JDK1.8中@Contented注解："></a>JDK1.8中@Contented注解：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Contended</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLongAtomic</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/03/MongoDB/"/>
    <url>/2022/03/03/MongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p><img src="https://raw.githubusercontent.com/hexuxu110/image/main/img/MongoDB.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/03/QUIC%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/03/03/QUIC%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="QUIC协议"><a href="#QUIC协议" class="headerlink" title="QUIC协议"></a>QUIC协议</h2><p>TCP队头阻塞的主要原因是数据包超时确认或丢失阻塞了当前窗口向右滑动，我们最容易想到的解决队头阻塞的方案是不让超时确认或丢失的数据包将当前窗口阻塞在原地。QUIC也正是采用上述方案来解决 TCP 队头阻塞问题的。</p><h5 id="QUIC-的无队头阻塞解决方案："><a href="#QUIC-的无队头阻塞解决方案：" class="headerlink" title="QUIC 的无队头阻塞解决方案："></a>QUIC 的无队头阻塞解决方案：</h5><p>每个流都是严格按照packet Number单调递增，</p><p>UIC 使用的 Packet Number单调递增的设计，可以让数据包不再像 TCP 那样必须有序确认，QUIC 支持乱序确认，当数据包 Packet N丢失后，只要有新的已接收数据包确认，当前窗口就会继续向右滑动。待发送端获知数据包 Packet N丢失后，会将需要重传的数据包放到待发送队列，重新编号比如数据包 Packet N+M 后重新发送给接收端</p><p>通过Stream ID和StreamOffset来对比重发数据包和丢失数据包</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
